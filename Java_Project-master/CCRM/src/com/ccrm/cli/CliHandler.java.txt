package com.ccrm.cli;

import com.ccrm.exception.CourseNotFoundException;
import com.ccrm.exception.StudentNotFoundException;
import com.ccrm.model.Course;
import com.ccrm.model.Grade;
import com.ccrm.model.Semester;
import com.ccrm.model.Student;
import com.ccrm.service.CourseService;
import com.ccrm.service.EnrollmentService;
import com.ccrm.service.StudentService;
import com.ccrm.util.FileUtility;

import java.util.Scanner;

public class CliHandler {

    private final Scanner scanner = new Scanner(System.in);
    private final StudentService studentService = StudentService.getInstance();
    private final CourseService courseService = CourseService.getInstance();
    private final EnrollmentService enrollmentService = EnrollmentService.getInstance();

    public void start() {
        // Load some initial data for demonstration
        loadInitialData();
        
        // --- do-while loop ---
        boolean exit = false;
        do {
            printMainMenu();
            System.out.print("Enter your choice: ");
            int choice = Integer.parseInt(scanner.nextLine());

            // --- Enhanced switch statement ---
            switch (choice) {
                case 1 -> handleStudentMenu();
                case 2 -> handleCourseMenu();
                case 3 -> handleEnrollmentMenu();
                case 4 -> handleFileMenu();
                case 0 -> exit = true;
                default -> System.out.println("Invalid choice. Please try again.");
            }
        } while (!exit);

        System.out.println("Thank you for using CCRM. Goodbye!");
    }

    // Other handlers... (handleStudentMenu, handleCourseMenu, etc.)
    private void handleStudentMenu() {
        System.out.println("\n--- Student Management ---");
        System.out.println("1. Add New Student");
        System.out.println("2. List All Students");
        System.out.println("3. View Student Profile");
        System.out.print("Choose an option: ");
        int choice = Integer.parseInt(scanner.nextLine());
        
        switch (choice) {
            case 1:
                System.out.print("Enter Registration No: ");
                String regNo = scanner.nextLine();
                System.out.print("Enter Full Name: ");
                String name = scanner.nextLine();
                System.out.print("Enter Email: ");
                String email = scanner.nextLine();
                Student student = new Student.Builder(regNo, name).email(email).build();
                studentService.addStudent(student);
                System.out.println("Student added successfully!");
                break;
            case 2:
                System.out.println("\n--- All Students ---");
                studentService.getAllStudents().forEach(System.out::println);
                break;
            case 3:
                 // Similar logic to get profile
                 break;
        }
    }
    
    private void handleEnrollmentMenu() {
        System.out.println("\n--- Enrollment & Grades ---");
        System.out.println("1. Enroll Student in Course");
        System.out.println("2. Assign Grade");
        System.out.println("3. View Student Transcript");
        System.out.print("Choose an option: ");
        int choice = Integer.parseInt(scanner.nextLine());

        try {
            switch (choice) {
                case 1:
                    System.out.print("Enter Student Reg No: ");
                    String regNo = scanner.nextLine();
                    System.out.print("Enter Course Code: ");
                    String courseCode = scanner.nextLine();
                    enrollmentService.enrollStudent(regNo, courseCode);
                    break;
                case 3:
                    System.out.print("Enter Student Reg No to view transcript: ");
                    String transcriptRegNo = scanner.nextLine();
                    enrollmentService.printTranscript(transcriptRegNo);
                    break;
                // ... other cases
            }
        } catch (StudentNotFoundException | CourseNotFoundException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    private void handleFileMenu() {
        // --- Demonstration of labeled jump ---
        OUTER_LOOP:
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                if (i == 1 && j == 0) {
                    System.out.println("Skipping this iteration with a labeled continue.");
                    continue OUTER_LOOP; // Not very useful here, but demonstrates syntax
                }
                if (i == 1 && j == 1) {
                    System.out.println("Breaking from outer loop with a labeled break.");
                    break OUTER_LOOP; // Exits both loops
                }
            }
        }

        System.out.println("\n--- File Utilities ---");
        System.out.println("1. Export Data to Files");
        System.out.println("2. Create Data Backup");
        System.out.println("3. Import Data from Files");
        System.out.print("Choose an option: ");
        int choice = Integer.parseInt(scanner.nextLine());
        
        switch (choice) {
            case 1 -> FileUtility.exportData();
            case 2 -> FileUtility.backupData();
            case 3 -> FileUtility.importData();
        }
    }

    private void printMainMenu() {
        System.out.println("\n===== Campus Course & Records Manager (CCRM) =====");
        System.out.println("1. Student Management");
        System.out.println("2. Course Management");
        System.out.println("3. Enrollment & Grading");
        System.out.println("4. File Utilities");
        System.out.println("0. Exit");
        System.out.println("==================================================");
    }

    private void loadInitialData() {
        // Students
        studentService.addStudent(new Student.Builder("S001", "Alice Smith").email("alice@example.com").build());
        studentService.addStudent(new Student.Builder("S002", "Bob Johnson").email("bob@example.com").build());
        // Courses
        courseService.addCourse(new Course("CS101", "Intro to Programming", 3, "Dr. Turing", Semester.FALL, "Computer Science"));
        courseService.addCourse(new Course("MA201", "Calculus II", 4, "Dr. Newton", Semester.FALL, "Mathematics"));
    }
}